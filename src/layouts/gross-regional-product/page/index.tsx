// #region imports
import _ from 'lodash';
import { formatNumber, formatChangeOneDecimal, formatShortDecimal, idlogo } from '../../../utils/';
import { ItemWrapper, SourceBubble, PageIntro } from '../../../styles/MainContentStyles';
import EntityTable from '../../../components/table/EntityTable';
import { useContext } from 'react';
import { ClientContext, PageContext } from '../../../utils/context';
import { IdLink, LinkBuilder, NierLink } from '../../../components/ui/links';
import ControlPanel from '../../../components/ControlPanel/ControlPanel';
import useEntityText from '../../../utils/useEntityText';
import EntityChart from '../../../components/chart/EntityChart';
import RelatedPagesCTA from '../../../components/RelatedPages';
// #endregion

// #region population page
const GrossRegionalProductPage = () => {
  const { clientAlias } = useContext(ClientContext);
  return (
    <>
      <PageIntro>
        <div>
          <p>
            Headline Gross Regional Product (GRP) is a measure of size or net wealth generated by the local economy.
            Changes in this figure over time can represent changes in employment, productivity or the types of
            industries in the area.
          </p>
          <p>
            Local Industry GRP shows the value of the local economy, generated by the local workers within the area
            regardless of where they live, after taxes and dividends leave the area. It is best thought of as GRP
            produced by local industries.
          </p>
          <p>
            Local Residents GRP refers to the economic output of the residents of the area regardless of where they
            work. It is best thought of as the income received by people in the City. If the Residents GRP is high
            relative to the Local Industry GRP, this indicates that residents are contributing their economic
            productivity to other areas (most likely commuting out).
          </p>
          <p>
            To understand the relative size of these measures and reasons behind the differences, GRP data should be
            viewed in conjunction with{' '}
            {LinkBuilder(`http://economy.id.com.au/${clientAlias}/Employment-capacity`, 'Jobs to workers ratio')} and{' '}
            {LinkBuilder(`http://economy.id.com.au/${clientAlias}/employed-locally`, 'Employment self-containment')}{' '}
            datasets. To understand the main contributors to GRP, this dataset should be viewed in conjunction with
            industry {LinkBuilder(`http://economy.id.com.au/${clientAlias}/value-add-by-industry`, 'Value added')}.
          </p>
        </div>
        <SourceBubble>
          <div>
            <h3>Data source</h3>
            <p>{useEntityText('DataSource')}</p>
          </div>
        </SourceBubble>
      </PageIntro>
      <ControlPanel />
      <ItemWrapper>
        <EntityTable data={tableBuilder()} name={useEntityText('SubTitle')} />
      </ItemWrapper>
      <ItemWrapper>
        <EntityChart data={chartBuilder()} />
      </ItemWrapper>
      <RelatedPagesCTA />
    </>
  );
};

export default GrossRegionalProductPage;
// #endregion

// #region Source
const Source = () => {
  const { clientAlias } = useContext(ClientContext);
  return (
    <p>
      Source: <NierLink /> ©2019. Compiled and presented in economy.id by <IdLink />. Data are based on a 2016-17 price
      base for all years. NIEIR-ID data are inflation adjusted each year to allow direct comparison, and annual data
      releases adjust previous years’ figures to a new base year.
      {LinkBuilder(`http://economy.id.com.au/${clientAlias}/economic-model-updates`, 'Learn more')}.
    </p>
  );
};
const ChartSource = () => (
  <p>
    Source: <NierLink /> ©2019 Compiled and presented in economy.id by
    <IdLink />.
  </p>
);
// #endregion
const chartBuilder = () => {
  const {
    contentData: nodes,
    entityData: { currentAreaName },
  } = useContext(PageContext);
  const chartTitle = `${currentAreaName} - Gross Regional Product`;
  const chartType = 'column';
  const geoName = nodes[0].GeoName;
  const xAxisTitle = 'Year ending June';
  const yAxisTitle = 'GRP $million';
  const rawDataSource =
    'Source: National Institute of Economic and Industry Research (NIEIR) ©2019 Compiled and presented in economy.id by .id the population experts';
  const chartContainerID = 'grp-chart';
  const categories = _.map(nodes, 'Year_End').reverse();
  const HeadLineGRP = _.map(nodes, 'HeadLineGRP').reverse();
  const IndustryGRP = _.map(nodes, 'IndustryGRP').reverse();
  const ResidentGRP = _.map(nodes, 'ResidentGRP').reverse();
  const tooltip = function() {
    return `<span class="highcharts-color-${this.colorIndex}">\u25CF</span> ${geoName}: $${formatNumber(
      this.y,
    )} millions`;
  };
  return {
    cssClass: '',
    highchartOptions: {
      chart: {
        type: chartType,
      },
      title: {
        text: chartTitle,
      },
      series: [
        {
          name: 'HeadLine GRP',
          data: HeadLineGRP,
        },
        {
          name: 'Industry GRP',
          data: IndustryGRP,
        },
        {
          name: 'Resident GRP',
          data: ResidentGRP,
        },
      ],
      plotOptions: {
        column: {
          pointPadding: 0,
          borderWidth: 0,
        },
      },
      xAxis: {
        categories,
        title: {
          text: xAxisTitle,
        },
      },
      yAxis: [
        {
          title: {
            text: yAxisTitle,
          },
          labels: {
            staggerLines: 0,
            formatter: function() {
              return formatNumber(this.value);
            },
          },
        },
      ],
      tooltip: {
        pointFormatter: function() {
          return tooltip.apply(this);
        },
      },
    },
    rawDataSource,
    dataSource: <ChartSource />,
    chartContainerID,
    logoUrl: idlogo,
  };
};
// #region tableBuilder
const tableBuilder = () => {
  const { clientAlias } = useContext(ClientContext);
  const {
    contentData: data,
    entityData: { currentAreaName },
  } = useContext(PageContext);
  const anchorName = 'gross-regional-product-(grp)';
  const tableTitle = `${currentAreaName} - Gross Regional Product measures`;

  const rows = data.map(({ Year_End, HeadLineGRP, ChangePer, IndustryGRP, ResidentGRP, ResGRPperIndGRP }) => ({
    id: Year_End,
    data: [Year_End, HeadLineGRP, ChangePer, IndustryGRP, ResidentGRP, ResGRPperIndGRP],
    formattedData: [
      `${Year_End}`,
      `${formatNumber(HeadLineGRP)}`,
      `${formatChangeOneDecimal(ChangePer, '--')}`,
      `${formatNumber(IndustryGRP)}`,
      `${formatNumber(ResidentGRP)}`,
      `${formatShortDecimal(ResGRPperIndGRP)}`,
    ],
  }));

  return {
    cssClass: '',
    allowSort: false,
    groupOn: '',
    clientAlias: clientAlias,
    source: <Source />,
    anchorName,
    headRows: [
      {
        cssClass: '',
        cols: [
          {
            cssClass: 'table-area-name',
            displayText: tableTitle,
            colSpan: 10,
            rowSpan: 0,
          },
        ],
        key: 'hr0',
      },
    ],
    cols: [
      {
        id: 0,
        displayText: 'Year ending June',
        cssClass: 'odd int ',
      },
      {
        id: 1,
        sortable: false,
        displayText: 'Headline GRP $m',
        cssClass: 'even int S',
      },
      {
        id: 2,
        sortable: false,
        displayText: '% change from previous year',
        cssClass: 'odd int S',
      },
      {
        id: 3,
        sortable: false,
        displayText: `Local industry GRP $m`,
        cssClass: 'even int L',
      },
      {
        id: 4,
        sortable: false,
        displayText: 'Local residents GRP $m',
        cssClass: 'odd int S',
      },
      {
        id: 5,
        sortable: false,
        displayText: 'Local industry to residents ratio',
        cssClass: 'even int S',
      },
    ],
    footRows: [],
    rows,
    noOfRowsOnInit: 0,
  };
};
// #endregion
