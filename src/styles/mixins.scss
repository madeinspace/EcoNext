@mixin for-phones {
  @media (max-width: 768px) {
    @content;
  }
}

@mixin for-tablet-portrait-up {
  @media (min-width: 768px) {
    @content;
  }
}

@mixin for-tablet-portait-only {
  @media (min-width: 768px) and (max-width: 900px) {
    @content;
  }
}

@mixin for-tablet-landscape-up {
  @media (min-width: 900px) {
    @content;
  }
}

@mixin for-tablet-landscape-only {
  @media (min-width: 768px) and (max-width: 992px) {
    @content;
  }
}

@mixin for-desktop-up {
  @media (min-width: 992px) {
    @content;
  }
}

@mixin for-desktop-only {
  @media (min-width: 992px) and (max-width: 1200px) {
    @content;
  }
}

@mixin theme() {
  @for $i from 1 through length($products) {
    $index: $i !global;

    .product-#{nth($products, $i)} & {
      @content;
    }
  }
}

@mixin font($font-fam:$base-font, $size: $font-size-base, $colour: $gray, $weight: false, $lh: false) {
  font-family: $font-fam;

  @if $size {
    font-size: $size;
  }

  @if $colour {
    color: $colour;
  }

  @if $weight {
    font-weight: $weight;
  }

  @if $lh {
    line-height: $lh;
  }
}

@mixin icon-style() {
  /* use !important to prevent issues with browser extensions that change fonts */
  font-family: 'id-icons' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  font-size: 18px;
  line-height: 0;
  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin make-icon($icon) {
  @include icon-style;
  content: $icon;
}

// :before :after always use these 3
@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

@mixin triangle($dir: up, $size:6px, $color:red) {

  color: $color;
  .symbol:before {
    display: inline-block;
    width: 0;
    height: 0;
    @if $dir==down {
      border-top: $size solid $color;
      border-right: ($size / 2) solid transparent;
      border-left: ($size / 2) solid transparent;
    }
  
    @else if $dir==up {
      border-bottom: $size solid $color;
      border-right: ($size / 2) solid transparent;
      border-left: ($size / 2) solid transparent;
    }
    content: "";
  }
}

// css triangles
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {
  @include pseudo($pos: $position);
  width: 0;
  height: 0;

  @if $round {
    border-radius: 3px;
  }

  @if $direction==down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round($size / 2);
  }

  @else if $direction==up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round($size / 2);
  }

  @else if $direction==right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  }

  @else if $direction==left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}

// truncate (max-width)
@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// trigger hardware acceleration for some animation, keeping everything fast, slick and flicker-free.
@mixin hardware($backface: true, $perspective: 1000) {
  @if $backface {
    backface-visibility: hidden;
  }

  perspective: $perspective;
}

// Vertical allign
@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

// usage:
//  div {
//  @include vertical-align();
//  }

// circle
@mixin circle($width, $color) {
  width: $width;
  height: $width;
  background: $color;
  border-radius: $width/2;
}

// usage
// div {
//  @include circle();
//  }