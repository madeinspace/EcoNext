{"ast":null,"code":"import _ from 'lodash';\nimport { commClient, commDataEconomy } from '../../../server/dbConnection';\n\nconst handle = async (req, res) => {\n  const {\n    clientAlias\n  } = req.query;\n  const clients = await commClient.raw(ClientSQL);\n  const client = clientFromAlias(clientAlias, clients);\n  const industries = await commDataEconomy.raw(BenchMarkIndustriesQuery(40));\n  const geo = await commDataEconomy.raw(BenchMarkGeoQuery(client.ClientID));\n  res.json({\n    title: 'Hello World',\n    clients,\n    industries,\n    geo\n  });\n};\n\nconst clientFromAlias = (clientAlias, clients) => _.find(clients, {\n  Alias: clientAlias\n});\n\nconst ignoreClients = _.isUndefined(process.env.IGNORE_CLIENTS) ? [] : process.env.IGNORE_CLIENTS.split(' ');\nexport default handle;\nconst ClientSQL = `\nWITH RDAS AS (\n  SELECT\n    DISTINCT(areas.ClientID),\n    CASE WHEN RDAs.IsRDA IS NOT NULL THEN 1 ELSE 0 END AS IsRDA\n    FROM [CommClient].[dbo].[ClientToAreas_Economy] areas\n    LEFT OUTER JOIN (\n    SELECT\n      DISTINCT(ClientID),\n      COUNT(WebID) AS IsRDA\n    FROM [CommClient].[dbo].[ClientToAreas_Economy] areas\n      WHERE WebID > 50\n      GROUP BY (ClientID)\n    ) AS RDAs\n    ON areas.ClientID = RDAs.ClientID\n  )\n  SELECT\n    client.ClientID,\n    client.Name,\n    client.ShortName,\n    client.LongName,\n    client.Alias\n  FROM Client AS client\n  INNER JOIN ClientAppDisable AS clientMeta\n    ON clientMeta.ClientID = client.ClientID\n  INNER JOIN RDAS\n    ON client.ClientID = RDAS.ClientID\n  WHERE clientMeta.IsDisabled = 0\n    AND clientMeta.ApplicationID = 4\n    AND RDAS.IsRDA = 0\n  ${ignoreClients.map(clientAlias => `  AND NOT client.Alias = '${clientAlias}'`).join('\\n')}\n`;\n\nconst BenchMarkIndustriesQuery = IGBMID => `\n  SELECT\n    CAST(23000 AS INT) AS ID,\n    'All industries' AS Name\n  WHERE 23000 != ${IGBMID}\n  UNION\n  SELECT\n    CAST(I.IndustryWebKey as INT) AS ID,\n    I.IndustryWebName AS Name\n  FROM CommData_Economy.dbo.vS_IndustryCodes AS I\n  INNER JOIN CommData_Economy.dbo.vS_IndustryCodesParents AS IP\n      ON I.Industrycode = IP.IndustryCode\n  WHERE I.IndustryWebKey != ${IGBMID} AND (I.IndustryWebKey NOT IN(23020,23045))\n    AND I.IndustryWebKey = IP.IndustryWebKey\n`;\n\nconst BenchMarkGeoQuery = ClientID => `\n    SELECT\n      WebID AS ID,\n      GeoName AS Name\n    FROM [CommClient].[dbo].[ClientToAreas_Economy]\n    WHERE ClientID = ${ClientID}\n    AND NOT WebID = 10\n  `;","map":{"version":3,"sources":["C:\\Users\\fabrice\\Documents\\Workspace\\EcoNext\\pages\\api\\[clientAlias]\\workers-field-of-qualification.ts"],"names":["_","commClient","commDataEconomy","handle","req","res","clientAlias","query","clients","raw","ClientSQL","client","clientFromAlias","industries","BenchMarkIndustriesQuery","geo","BenchMarkGeoQuery","ClientID","json","title","find","Alias","ignoreClients","isUndefined","process","env","IGNORE_CLIENTS","split","map","join","IGBMID"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,8BAA5C;;AAEA,MAAMC,MAAM,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAkBF,GAAG,CAACG,KAA5B;AAEA,QAAMC,OAAO,GAAG,MAAMP,UAAU,CAACQ,GAAX,CAAeC,SAAf,CAAtB;AACA,QAAMC,MAAM,GAAGC,eAAe,CAACN,WAAD,EAAcE,OAAd,CAA9B;AACA,QAAMK,UAAU,GAAG,MAAMX,eAAe,CAACO,GAAhB,CAAoBK,wBAAwB,CAAC,EAAD,CAA5C,CAAzB;AACA,QAAMC,GAAG,GAAG,MAAMb,eAAe,CAACO,GAAhB,CAAoBO,iBAAiB,CAACL,MAAM,CAACM,QAAR,CAArC,CAAlB;AAEAZ,EAAAA,GAAG,CAACa,IAAJ,CAAS;AAAEC,IAAAA,KAAK,EAAE,aAAT;AAAwBX,IAAAA,OAAxB;AAAiCK,IAAAA,UAAjC;AAA6CE,IAAAA;AAA7C,GAAT;AACD,CATD;;AAWA,MAAMH,eAAe,GAAG,CAACN,WAAD,EAAcE,OAAd,KACtBR,CAAC,CAACoB,IAAF,CAAOZ,OAAP,EAAgB;AAAEa,EAAAA,KAAK,EAAEf;AAAT,CAAhB,CADF;;AAGA,MAAMgB,aAAa,GAAGtB,CAAC,CAACuB,WAAF,CAAcC,OAAO,CAACC,GAAR,CAAYC,cAA1B,IAClB,EADkB,GAElBF,OAAO,CAACC,GAAR,CAAYC,cAAZ,CAA2BC,KAA3B,CAAiC,GAAjC,CAFJ;AAIA,eAAexB,MAAf;AAEA,MAAMO,SAAS,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA8BfY,aAAa,CACZM,GADD,CACKtB,WAAW,IAAK,6BAA4BA,WAAY,GAD7D,EAECuB,IAFD,CAEM,IAFN,CAEY;CAhChB;;AAmCA,MAAMf,wBAAwB,GAAGgB,MAAM,IAAK;;;;mBAIzBA,MAAO;;;;;;;;8BAQIA,MAAO;;CAZrC;;AAgBA,MAAMd,iBAAiB,GAAGC,QAAQ,IAC/B;;;;;uBAKoBA,QAAS;;GANhC","sourcesContent":["import _ from 'lodash';\r\nimport { commClient, commDataEconomy } from '../../../server/dbConnection';\r\n\r\nconst handle = async (req, res) => {\r\n  const { clientAlias } = req.query;\r\n\r\n  const clients = await commClient.raw(ClientSQL);\r\n  const client = clientFromAlias(clientAlias, clients);\r\n  const industries = await commDataEconomy.raw(BenchMarkIndustriesQuery(40));\r\n  const geo = await commDataEconomy.raw(BenchMarkGeoQuery(client.ClientID));\r\n\r\n  res.json({ title: 'Hello World', clients, industries, geo });\r\n};\r\n\r\nconst clientFromAlias = (clientAlias, clients) =>\r\n  _.find(clients, { Alias: clientAlias });\r\n\r\nconst ignoreClients = _.isUndefined(process.env.IGNORE_CLIENTS)\r\n  ? []\r\n  : process.env.IGNORE_CLIENTS.split(' ');\r\n\r\nexport default handle;\r\n\r\nconst ClientSQL = `\r\nWITH RDAS AS (\r\n  SELECT\r\n    DISTINCT(areas.ClientID),\r\n    CASE WHEN RDAs.IsRDA IS NOT NULL THEN 1 ELSE 0 END AS IsRDA\r\n    FROM [CommClient].[dbo].[ClientToAreas_Economy] areas\r\n    LEFT OUTER JOIN (\r\n    SELECT\r\n      DISTINCT(ClientID),\r\n      COUNT(WebID) AS IsRDA\r\n    FROM [CommClient].[dbo].[ClientToAreas_Economy] areas\r\n      WHERE WebID > 50\r\n      GROUP BY (ClientID)\r\n    ) AS RDAs\r\n    ON areas.ClientID = RDAs.ClientID\r\n  )\r\n  SELECT\r\n    client.ClientID,\r\n    client.Name,\r\n    client.ShortName,\r\n    client.LongName,\r\n    client.Alias\r\n  FROM Client AS client\r\n  INNER JOIN ClientAppDisable AS clientMeta\r\n    ON clientMeta.ClientID = client.ClientID\r\n  INNER JOIN RDAS\r\n    ON client.ClientID = RDAS.ClientID\r\n  WHERE clientMeta.IsDisabled = 0\r\n    AND clientMeta.ApplicationID = 4\r\n    AND RDAS.IsRDA = 0\r\n  ${ignoreClients\r\n    .map(clientAlias => `  AND NOT client.Alias = '${clientAlias}'`)\r\n    .join('\\n')}\r\n`;\r\n\r\nconst BenchMarkIndustriesQuery = IGBMID => `\r\n  SELECT\r\n    CAST(23000 AS INT) AS ID,\r\n    'All industries' AS Name\r\n  WHERE 23000 != ${IGBMID}\r\n  UNION\r\n  SELECT\r\n    CAST(I.IndustryWebKey as INT) AS ID,\r\n    I.IndustryWebName AS Name\r\n  FROM CommData_Economy.dbo.vS_IndustryCodes AS I\r\n  INNER JOIN CommData_Economy.dbo.vS_IndustryCodesParents AS IP\r\n      ON I.Industrycode = IP.IndustryCode\r\n  WHERE I.IndustryWebKey != ${IGBMID} AND (I.IndustryWebKey NOT IN(23020,23045))\r\n    AND I.IndustryWebKey = IP.IndustryWebKey\r\n`;\r\n\r\nconst BenchMarkGeoQuery = ClientID =>\r\n  `\r\n    SELECT\r\n      WebID AS ID,\r\n      GeoName AS Name\r\n    FROM [CommClient].[dbo].[ClientToAreas_Economy]\r\n    WHERE ClientID = ${ClientID}\r\n    AND NOT WebID = 10\r\n  `;\r\n"]},"metadata":{},"sourceType":"module"}