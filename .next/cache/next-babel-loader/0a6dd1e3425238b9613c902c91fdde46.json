{"ast":null,"code":"import _ from 'lodash';\nconst DEFAULT_DATABASE_HOST = '192.168.16.15';\nconst DEFAULT_DATABASE_USER = 'CommUser';\nconst DEFAULT_DATABASE_PASS = 'idCommUser&1admin';\nconst DEFAULT_DATABASE_NAME = 'CommClient';\nconst DATA_DATABASE_NAME = 'CommData_Economy';\nconst COMMAPP_DATABASE_NAME = 'CommApp';\n\nconst handle = async (req, res) => {\n  const {\n    clientAlias\n  } = req.query;\n  const clients = await knex(CommClientDBConnection()).raw(ClientSQL);\n  const clientId = 103;\n  const industries = await knex(CommDataEconomyDBConnection()).raw(BenchMarkIndustriesQuery(40));\n  const geo = await knex(CommDataEconomyDBConnection()).raw(BenchMarkGeoQuery(clientId));\n  res.json({\n    title: 'Hello World',\n    clients,\n    industries,\n    geo\n  });\n};\n\nconst CommDataEconomyDBConnection = () => ({\n  client: 'mssql',\n  connection: {\n    host: DEFAULT_DATABASE_HOST,\n    user: DEFAULT_DATABASE_USER,\n    password: DEFAULT_DATABASE_PASS,\n    database: DEFAULT_DATABASE_NAME,\n    requestTimeout: 0,\n    options: {\n      encrypt: false\n    }\n  },\n  acquireConnectionTimeout: 600000\n});\n\nconst knex = require('knex');\n\nconst DataConnection = knex(CommDataEconomyDBConnection());\nconst ignoreClients = _.isUndefined(process.env.IGNORE_CLIENTS) ? [] : process.env.IGNORE_CLIENTS.split(' ');\n\nconst getScopedEnvVar = (scope, db_env_var) => process.env[`${scope}_${db_env_var}`] || process.env[`DEFAULT_${db_env_var}`];\n\nconst CommClientDBConnection = () => ({\n  client: 'mssql',\n  connection: {\n    host: DEFAULT_DATABASE_HOST,\n    user: DEFAULT_DATABASE_USER,\n    password: DEFAULT_DATABASE_PASS,\n    database: DEFAULT_DATABASE_NAME,\n    options: {\n      encrypt: false\n    }\n  }\n});\n\nexport default handle;\nconst ClientSQL = `\nWITH RDAS AS (\n  SELECT\n    DISTINCT(areas.ClientID),\n    CASE WHEN RDAs.IsRDA IS NOT NULL THEN 1 ELSE 0 END AS IsRDA\n    FROM [CommClient].[dbo].[ClientToAreas_Economy] areas\n    LEFT OUTER JOIN (\n    SELECT\n      DISTINCT(ClientID),\n      COUNT(WebID) AS IsRDA\n    FROM [CommClient].[dbo].[ClientToAreas_Economy] areas\n      WHERE WebID > 50\n      GROUP BY (ClientID)\n    ) AS RDAs\n    ON areas.ClientID = RDAs.ClientID\n  )\n  SELECT\n    client.ClientID,\n    client.Name,\n    client.ShortName,\n    client.LongName,\n    client.Alias\n  FROM Client AS client\n  INNER JOIN ClientAppDisable AS clientMeta\n    ON clientMeta.ClientID = client.ClientID\n  INNER JOIN RDAS\n    ON client.ClientID = RDAS.ClientID\n  WHERE clientMeta.IsDisabled = 0\n    AND clientMeta.ApplicationID = 4\n    AND RDAS.IsRDA = 0\n  ${ignoreClients.map(clientAlias => `  AND NOT client.Alias = '${clientAlias}'`).join('\\n')}\n`;\n\nconst BenchMarkIndustriesQuery = IGBMID => `\n  SELECT\n    CAST(23000 AS INT) AS ID,\n    'All industries' AS Name\n  WHERE 23000 != ${IGBMID}\n  UNION\n  SELECT\n    CAST(I.IndustryWebKey as INT) AS ID,\n    I.IndustryWebName AS Name\n  FROM CommData_Economy.dbo.vS_IndustryCodes AS I\n  INNER JOIN CommData_Economy.dbo.vS_IndustryCodesParents AS IP\n      ON I.Industrycode = IP.IndustryCode\n  WHERE I.IndustryWebKey != ${IGBMID} AND (I.IndustryWebKey NOT IN(23020,23045))\n    AND I.IndustryWebKey = IP.IndustryWebKey\n`;\n\nconst BenchMarkGeoQuery = ClientID => `\n    SELECT\n      WebID AS ID,\n      GeoName AS Name\n    FROM [CommClient].[dbo].[ClientToAreas_Economy]\n    WHERE ClientID = ${ClientID}\n    AND NOT WebID = 10\n  `;","map":{"version":3,"sources":["C:\\Users\\fabrice\\Documents\\Workspace\\EcoNext\\pages\\api\\[clientAlias]\\workers-field-of-qualification.ts"],"names":["_","DEFAULT_DATABASE_HOST","DEFAULT_DATABASE_USER","DEFAULT_DATABASE_PASS","DEFAULT_DATABASE_NAME","DATA_DATABASE_NAME","COMMAPP_DATABASE_NAME","handle","req","res","clientAlias","query","clients","knex","CommClientDBConnection","raw","ClientSQL","clientId","industries","CommDataEconomyDBConnection","BenchMarkIndustriesQuery","geo","BenchMarkGeoQuery","json","title","client","connection","host","user","password","database","requestTimeout","options","encrypt","acquireConnectionTimeout","require","DataConnection","ignoreClients","isUndefined","process","env","IGNORE_CLIENTS","split","getScopedEnvVar","scope","db_env_var","map","join","IGBMID","ClientID"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\n\r\nconst DEFAULT_DATABASE_HOST = '192.168.16.15';\r\nconst DEFAULT_DATABASE_USER = 'CommUser';\r\nconst DEFAULT_DATABASE_PASS = 'idCommUser&1admin';\r\nconst DEFAULT_DATABASE_NAME = 'CommClient';\r\nconst DATA_DATABASE_NAME = 'CommData_Economy';\r\nconst COMMAPP_DATABASE_NAME = 'CommApp';\r\n\r\nconst handle = async (req, res) => {\r\n  const { clientAlias } = req.query;\r\n\r\n  const clients = await knex(CommClientDBConnection()).raw(ClientSQL);\r\n  const clientId = 103;\r\n  const industries = await knex(CommDataEconomyDBConnection()).raw(\r\n    BenchMarkIndustriesQuery(40)\r\n  );\r\n  const geo = await knex(CommDataEconomyDBConnection()).raw(\r\n    BenchMarkGeoQuery(clientId)\r\n  );\r\n\r\n  res.json({ title: 'Hello World', clients, industries, geo });\r\n};\r\n\r\nconst CommDataEconomyDBConnection = () => ({\r\n  client: 'mssql',\r\n  connection: {\r\n    host: DEFAULT_DATABASE_HOST,\r\n    user: DEFAULT_DATABASE_USER,\r\n    password: DEFAULT_DATABASE_PASS,\r\n    database: DEFAULT_DATABASE_NAME,\r\n    requestTimeout: 0,\r\n    options: { encrypt: false }\r\n  },\r\n  acquireConnectionTimeout: 600000\r\n});\r\nconst knex = require('knex');\r\nconst DataConnection = knex(CommDataEconomyDBConnection());\r\n\r\nconst ignoreClients = _.isUndefined(process.env.IGNORE_CLIENTS)\r\n  ? []\r\n  : process.env.IGNORE_CLIENTS.split(' ');\r\n\r\nconst getScopedEnvVar = (scope, db_env_var) =>\r\n  process.env[`${scope}_${db_env_var}`] || process.env[`DEFAULT_${db_env_var}`];\r\n\r\nconst CommClientDBConnection = () => ({\r\n  client: 'mssql',\r\n  connection: {\r\n    host: DEFAULT_DATABASE_HOST,\r\n    user: DEFAULT_DATABASE_USER,\r\n    password: DEFAULT_DATABASE_PASS,\r\n    database: DEFAULT_DATABASE_NAME,\r\n    options: { encrypt: false }\r\n  }\r\n});\r\nexport default handle;\r\n\r\nconst ClientSQL = `\r\nWITH RDAS AS (\r\n  SELECT\r\n    DISTINCT(areas.ClientID),\r\n    CASE WHEN RDAs.IsRDA IS NOT NULL THEN 1 ELSE 0 END AS IsRDA\r\n    FROM [CommClient].[dbo].[ClientToAreas_Economy] areas\r\n    LEFT OUTER JOIN (\r\n    SELECT\r\n      DISTINCT(ClientID),\r\n      COUNT(WebID) AS IsRDA\r\n    FROM [CommClient].[dbo].[ClientToAreas_Economy] areas\r\n      WHERE WebID > 50\r\n      GROUP BY (ClientID)\r\n    ) AS RDAs\r\n    ON areas.ClientID = RDAs.ClientID\r\n  )\r\n  SELECT\r\n    client.ClientID,\r\n    client.Name,\r\n    client.ShortName,\r\n    client.LongName,\r\n    client.Alias\r\n  FROM Client AS client\r\n  INNER JOIN ClientAppDisable AS clientMeta\r\n    ON clientMeta.ClientID = client.ClientID\r\n  INNER JOIN RDAS\r\n    ON client.ClientID = RDAS.ClientID\r\n  WHERE clientMeta.IsDisabled = 0\r\n    AND clientMeta.ApplicationID = 4\r\n    AND RDAS.IsRDA = 0\r\n  ${ignoreClients\r\n    .map(clientAlias => `  AND NOT client.Alias = '${clientAlias}'`)\r\n    .join('\\n')}\r\n`;\r\n\r\nconst BenchMarkIndustriesQuery = IGBMID => `\r\n  SELECT\r\n    CAST(23000 AS INT) AS ID,\r\n    'All industries' AS Name\r\n  WHERE 23000 != ${IGBMID}\r\n  UNION\r\n  SELECT\r\n    CAST(I.IndustryWebKey as INT) AS ID,\r\n    I.IndustryWebName AS Name\r\n  FROM CommData_Economy.dbo.vS_IndustryCodes AS I\r\n  INNER JOIN CommData_Economy.dbo.vS_IndustryCodesParents AS IP\r\n      ON I.Industrycode = IP.IndustryCode\r\n  WHERE I.IndustryWebKey != ${IGBMID} AND (I.IndustryWebKey NOT IN(23020,23045))\r\n    AND I.IndustryWebKey = IP.IndustryWebKey\r\n`;\r\n\r\nconst BenchMarkGeoQuery = ClientID =>\r\n  `\r\n    SELECT\r\n      WebID AS ID,\r\n      GeoName AS Name\r\n    FROM [CommClient].[dbo].[ClientToAreas_Economy]\r\n    WHERE ClientID = ${ClientID}\r\n    AND NOT WebID = 10\r\n  `;\r\n"]},"metadata":{},"sourceType":"module"}