{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\fabrice\\\\Documents\\\\Workspace\\\\EcoNext\\\\pages\\\\[clientAlias]\\\\workers-field-of-qualification.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\n\nvar LocalWorkerFieldofQualififcation = function LocalWorkerFieldofQualififcation(_ref) {\n  var clients = _ref.clients;\n  var router = useRouter();\n  var clientAlias = router.query.clientAlias;\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Workers field of qualification\"), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Client alias is \", clientAlias), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, clients.map(function (client) {\n    return __jsx(\"li\", {\n      key: client.ClientID,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, client.Name);\n  })));\n};\n\nexport default LocalWorkerFieldofQualififcation;\nLocalWorkerFieldofQualififcation.getInitialProps =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee() {\n  var res, data;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch('http://localhost:3000/api/monash/workers-field-of-qualification');\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return res.json();\n\n        case 5:\n          data = _context.sent;\n          return _context.abrupt(\"return\", data);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));","map":{"version":3,"sources":["C:\\Users\\fabrice\\Documents\\Workspace\\EcoNext\\pages\\[clientAlias]\\workers-field-of-qualification.tsx"],"names":["fetch","useRouter","LocalWorkerFieldofQualififcation","clients","router","clientAlias","query","map","client","ClientID","Name","getInitialProps","res","json","data"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,IAAMC,gCAAgC,GAAG,SAAnCA,gCAAmC,OAAiB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AACxD,MAAMC,MAAM,GAAGH,SAAS,EAAxB;AADwD,MAEhDI,WAFgD,GAEhCD,MAAM,CAACE,KAFyB,CAEhDD,WAFgD;AAGxD,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAoBA,WAApB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,OAAO,CAACI,GAAR,CAAY,UAAAC,MAAM;AAAA,WACjB;AAAI,MAAA,GAAG,EAAEA,MAAM,CAACC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2BD,MAAM,CAACE,IAAlC,CADiB;AAAA,GAAlB,CADH,CAHF,CADF;AAWD,CAdD;;AAgBA,eAAeR,gCAAf;AAEAA,gCAAgC,CAACS,eAAjC;AAAA;AAAA;AAAA;AAAA,yBAAmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAC/BX,KAAK,CACrB,iEADqB,CAD0B;;AAAA;AAC3CY,UAAAA,GAD2C;AAAA;AAAA,iBAI9BA,GAAG,CAACC,IAAJ,EAJ8B;;AAAA;AAI3CC,UAAAA,IAJ2C;AAAA,2CAM1CA,IAN0C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnD","sourcesContent":["import fetch from 'isomorphic-unfetch';\r\nimport { useRouter } from 'next/router';\r\n\r\nconst LocalWorkerFieldofQualififcation = ({ clients }) => {\r\n  const router = useRouter();\r\n  const { clientAlias } = router.query;\r\n  return (\r\n    <div>\r\n      <h1>Workers field of qualification</h1>\r\n      <p>Client alias is {clientAlias}</p>\r\n      <ul>\r\n        {clients.map(client => (\r\n          <li key={client.ClientID}>{client.Name}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LocalWorkerFieldofQualififcation;\r\n\r\nLocalWorkerFieldofQualififcation.getInitialProps = async function() {\r\n  const res = await fetch(\r\n    'http://localhost:3000/api/monash/workers-field-of-qualification'\r\n  );\r\n  const data = await res.json();\r\n\r\n  return data;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}